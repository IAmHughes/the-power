normal=$(tput sgr0)
highlight=$(tput setaf 2)

printf "$highlight"

cat << EOF

  ________            ____                         
 /_  __/ /_  ___     / __ \____ _      _____  _____
  / / / __ \/ _ \   / /_/ / __ \ | /| / / _ \/ ___/
 / / / / / /  __/  / ____/ /_/ / |/ |/ /  __/ /    
/_/ /_/ /_/\___/  /_/    \____/|__/|__/\___/_/     

EOF

printf "${normal}"
                                                   
     printf "${highlight} - Creating repo: ${normal}"
    ./create-repo-testrepo.sh | jq -r '.name'
     printf "${highlight} - Creating webhook: ${normal}"
    ./create-webhook.sh  | jq -r '.id'
    sleep 5

     printf "${highlight} - Clean the slate and delete teams (if they exist): ${normal}"
    echo
    echo
    ./delete-teams-for-permissions.sh
    echo

     printf "${highlight} - Create the teams named based on permissions:  ${normal}"
    echo
    echo
    ./create-teams-for-repository-permission.sh
    echo
    
     printf "${highlight} - Add users to teams:  ${normal}"
    echo
    echo
    ./add-users-to-teams-for-repository-permission.sh
    echo
    
     printf "${highlight} - Add repo to teams:  ${normal}"
    echo
    echo
    ./add-repo-to-permissions-teams.sh
    echo
     printf "${highlight} - Delete team_admin user from created teams:  ${normal}"
     echo
     echo
    ./delete-admin-from-teams-for-permissions.sh
     echo
    
     printf "${highlight} - Add/Invite repo_collaborator user to repo:  ${normal}"
    ./add-collaborator-to-repo.sh | jq -r '.invitee.login'

     printf "${highlight} - Creating docs/README.md: ${normal}"
    ./create-commit-readme.sh | jq -r ".content.html_url"
     printf "${highlight} - Creating CODEOWNERS: ${normal}"
    ./create-commit-codeowners.sh| jq -r ".content.html_url"
     printf "${highlight} - Creating requirements.txt: ${normal}"
    ./create-commit-python-pip.sh| jq -r ".content.html_url"
    sleep 2
     printf "${highlight} - Creating new branch: ${normal}"
    ./create-branch-newbranch.sh | jq -r '.url'
     printf "${highlight} - Creating a commit on the new branch: ${normal}"
    ./create-commit-on-new-branch.sh | jq -r ".content.html_url"
     printf "${highlight} - Creating an update commit to docs/README.md: ${normal}"
    ./create-commit-update-readme.sh | jq -r ".content.html_url"
     printf "${highlight} - Creating an issue: ${normal}"
    ./create-an-issue.sh | jq -r '.html_url'
     printf "${highlight} - Creating a pull request: ${normal}"
    ./create-pull-request.sh | jq -r '.html_url'
    # set the branch protection rules for main
     printf "${highlight} - Setting branch protection rules on default branch: ${normal}"
    ./set-branch-protection.sh | jq -r '.url'

     printf "${highlight} - Creating a release: ${normal}"
    ./create-release.sh  | jq -r '.html_url'
     printf "${highlight} - Adding a .gitattributes file to new branch: ${normal}"
    ./create-commit-gitattributes.sh | jq -r ".content.html_url"
     echo 


    # If you have the appropriate token set in `pr_approver_token`
    # then you can provide an approving review:
    # ./create-approving-review-for-a-pull-request.sh
